# -*- coding: utf-8 -*-
"""Untitled4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1oTXD8vnT6-4BPM1sA1QZFHpw_GSJl1M_
"""

import numpy as np
import sys
import os
from sklearn.metrics import mean_squared_error
from skimage.metrics import structural_similarity as ssim
from PIL import Image

def load_images(dir_path):
  # initialize an empty list to store the images
  images = []
  # iterate through all the files in the directory
  for file_name in os.listdir(dir_path):
      # check if the file is an image
      if file_name.endswith('.jpg') or file_name.endswith('.png'):
          # open the image using the PIL library
          image = Image.open(os.path.join(dir_path, file_name))
          # add the image to the list
          images.append(image)

def evaluate_predictions(model_output,ground_truth):
  # Calculate the mean squared error
  mse = mean_squared_error(ground_truth, model_output)
  print("Mean Squared Error: ", mse)

  # Calculate the Structural Similarity Index (SSIM)
  ssim_value = ssim(ground_truth, model_output, multichannel=True)
  print("Structural Similarity Index: ", ssim_value)

  psnr_value = psnr(ground_truth, model_output)
  print("Peak Signal-to-Noise Ratio: ", psnr_value)

# Calculate the Peak Signal-to-Noise Ratio (PSNR)
def psnr(img1, img2):
    mse = np.mean((img1 - img2) ** 2)
    if mse == 0:
        return 100
    PIXEL_MAX = 255.0
    return 20 * np.log10(PIXEL_MAX / np.sqrt(mse))

def main():
  # Load the model's output and ground truth image
  model_output = load_images('data/model_output')
  ground_truth = load_images('data/ground_truth')

  # Convert images to numpy arrays
  model_output = np.array(model_output)
  ground_truth = np.array(ground_truth)

  # Evaluate the model
  evaluate_predictions(model_output, ground_truth)

if __name__ == '__main__':
    main()